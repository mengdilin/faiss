<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacefaiss_1_1gpu" kind="namespace" language="C++">
    <compoundname>faiss::gpu</compoundname>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuParameterSpace" prot="public">faiss::gpu::GpuParameterSpace</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1ToCPUCloner" prot="public">faiss::gpu::ToCPUCloner</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1ToGpuCloner" prot="public">faiss::gpu::ToGpuCloner</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1ToGpuClonerMultiple" prot="public">faiss::gpu::ToGpuClonerMultiple</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuProgressiveDimIndexFactory" prot="public">faiss::gpu::GpuProgressiveDimIndexFactory</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuClonerOptions" prot="public">faiss::gpu::GpuClonerOptions</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuMultipleClonerOptions" prot="public">faiss::gpu::GpuMultipleClonerOptions</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuDistanceParams" prot="public">faiss::gpu::GpuDistanceParams</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIcmEncoder" prot="public">faiss::gpu::GpuIcmEncoder</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIcmEncoderFactory" prot="public">faiss::gpu::GpuIcmEncoderFactory</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexConfig" prot="public">faiss::gpu::GpuIndexConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndex" prot="public">faiss::gpu::GpuIndex</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" prot="public">faiss::gpu::GpuIndexBinaryFlatConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat" prot="public">faiss::gpu::GpuIndexBinaryFlat</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1IVFPQBuildCagraConfig" prot="public">faiss::gpu::IVFPQBuildCagraConfig</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1IVFPQSearchCagraConfig" prot="public">faiss::gpu::IVFPQSearchCagraConfig</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexCagraConfig" prot="public">faiss::gpu::GpuIndexCagraConfig</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1SearchParametersCagra" prot="public">faiss::gpu::SearchParametersCagra</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexCagra" prot="public">faiss::gpu::GpuIndexCagra</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexFlatConfig" prot="public">faiss::gpu::GpuIndexFlatConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexFlat" prot="public">faiss::gpu::GpuIndexFlat</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexFlatL2" prot="public">faiss::gpu::GpuIndexFlatL2</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexFlatIP" prot="public">faiss::gpu::GpuIndexFlatIP</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexIVFConfig" prot="public">faiss::gpu::GpuIndexIVFConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexIVF" prot="public">faiss::gpu::GpuIndexIVF</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexIVFFlatConfig" prot="public">faiss::gpu::GpuIndexIVFFlatConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexIVFFlat" prot="public">faiss::gpu::GpuIndexIVFFlat</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexIVFPQConfig" prot="public">faiss::gpu::GpuIndexIVFPQConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexIVFPQ" prot="public">faiss::gpu::GpuIndexIVFPQ</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuIndexIVFScalarQuantizerConfig" prot="public">faiss::gpu::GpuIndexIVFScalarQuantizerConfig</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuIndexIVFScalarQuantizer" prot="public">faiss::gpu::GpuIndexIVFScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1AllocInfo" prot="public">faiss::gpu::AllocInfo</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1AllocRequest" prot="public">faiss::gpu::AllocRequest</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1GpuMemoryReservation" prot="public">faiss::gpu::GpuMemoryReservation</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuResources" prot="public">faiss::gpu::GpuResources</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" prot="public">faiss::gpu::GpuResourcesProvider</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1GpuResourcesProviderFromInstance" prot="public">faiss::gpu::GpuResourcesProviderFromInstance</innerclass>
    <innerclass refid="structfaiss_1_1gpu_1_1IndexWrapper" prot="public">faiss::gpu::IndexWrapper</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl" prot="public">faiss::gpu::StandardGpuResourcesImpl</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1StandardGpuResources" prot="public">faiss::gpu::StandardGpuResources</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1DeviceScope" prot="public">faiss::gpu::DeviceScope</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1CublasHandleScope" prot="public">faiss::gpu::CublasHandleScope</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1CudaEvent" prot="public">faiss::gpu::CudaEvent</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1StackDeviceMemory" prot="public">faiss::gpu::StackDeviceMemory</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1KernelTimer" prot="public">faiss::gpu::KernelTimer</innerclass>
    <innerclass refid="classfaiss_1_1gpu_1_1CpuTimer" prot="public">faiss::gpu::CpuTimer</innerclass>
    <innernamespace refid="namespacefaiss_1_1gpu_1_1utils">faiss::gpu::utils</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="GpuDistance_8h_1aa22865a7603feb994c5946c7c4d12268" prot="public" static="no" strong="yes">
        <type></type>
        <name>DistanceDataType</name>
        <enumvalue id="GpuDistance_8h_1aa22865a7603feb994c5946c7c4d12268a44ad4ef5a76e6aa6fb3e3fa079a54fda" prot="public">
          <name>F32</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuDistance_8h_1aa22865a7603feb994c5946c7c4d12268a56d8353718e6fdc78b8d69078a2cdb94" prot="public">
          <name>F16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="19" column="1" bodyfile="faiss/gpu/GpuDistance.h" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="GpuDistance_8h_1a6b68daa1ef37853ef9cab2ae9007b480" prot="public" static="no" strong="yes">
        <type></type>
        <name>IndicesDataType</name>
        <enumvalue id="GpuDistance_8h_1a6b68daa1ef37853ef9cab2ae9007b480ae7e62f6928f76df671b5a0379793fab6" prot="public">
          <name>I64</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuDistance_8h_1a6b68daa1ef37853ef9cab2ae9007b480ad878ea6016bfe01729548bf442de5a8b" prot="public">
          <name>I32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="25" column="1" bodyfile="faiss/gpu/GpuDistance.h" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="GpuIndexCagra_8h_1aa0e933a28e0037517f9678db957992ac" prot="public" static="no" strong="yes">
        <type></type>
        <name>graph_build_algo</name>
        <enumvalue id="GpuIndexCagra_8h_1aa0e933a28e0037517f9678db957992aca024a07775560847f41dcb5aa52c37418" prot="public">
          <name>IVF_PQ</name>
          <briefdescription>
<para>Use IVF-PQ to build all-neighbors knn graph. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1aa0e933a28e0037517f9678db957992aca5c5827c864a6a539617cb236291f0285" prot="public">
          <name>NN_DESCENT</name>
          <briefdescription>
<para>Experimental, use NN-Descent to build all-neighbors knn graph. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexCagra.h" line="38" column="1" bodyfile="faiss/gpu/GpuIndexCagra.h" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="GpuIndexCagra_8h_1aa3d8d5d9d02d583d49ccb9d2c70e8a39" prot="public" static="no" strong="yes">
        <type></type>
        <name>codebook_gen</name>
        <enumvalue id="GpuIndexCagra_8h_1aa3d8d5d9d02d583d49ccb9d2c70e8a39a5056773a9c21a05e14106e853dc39c42" prot="public">
          <name>PER_SUBSPACE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1aa3d8d5d9d02d583d49ccb9d2c70e8a39ab4bc06123f1a290656a492b25ebab336" prot="public">
          <name>PER_CLUSTER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A type for specifying how PQ codebooks are created. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexCagra.h" line="46" column="1" bodyfile="faiss/gpu/GpuIndexCagra.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="enum" id="GpuIndexCagra_8h_1a26fa43c3f1c5f5fef391e79a6ced2c02" prot="public" static="no" strong="yes">
        <type></type>
        <name>search_algo</name>
        <enumvalue id="GpuIndexCagra_8h_1a26fa43c3f1c5f5fef391e79a6ced2c02af332a3fd29e620d4e2bef25d02e1aff0" prot="public">
          <name>SINGLE_CTA</name>
          <briefdescription>
<para>For large batch sizes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1a26fa43c3f1c5f5fef391e79a6ced2c02a20aa6f7eb96e3f630bb0c0a8f4acffeb" prot="public">
          <name>MULTI_CTA</name>
          <briefdescription>
<para>For small batch sizes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1a26fa43c3f1c5f5fef391e79a6ced2c02a244534a9bc2ff7a11ac470ef0eff013b" prot="public">
          <name>MULTI_KERNEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1a26fa43c3f1c5f5fef391e79a6ced2c02ae1f2d5134ed2543d38a0de9751cf75d9" prot="public">
          <name>AUTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexCagra.h" line="179" column="1" bodyfile="faiss/gpu/GpuIndexCagra.h" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="enum" id="GpuIndexCagra_8h_1a9b883db6f85c9d03606d01b0fd01821e" prot="public" static="no" strong="yes">
        <type></type>
        <name>hash_mode</name>
        <enumvalue id="GpuIndexCagra_8h_1a9b883db6f85c9d03606d01b0fd01821ea50b7748612b28db487d115f220bb77ab" prot="public">
          <name>HASH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1a9b883db6f85c9d03606d01b0fd01821ea9b9c17e13f0e3dc9860a26e08b59b2a7" prot="public">
          <name>SMALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndexCagra_8h_1a9b883db6f85c9d03606d01b0fd01821eae1f2d5134ed2543d38a0de9751cf75d9" prot="public">
          <name>AUTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexCagra.h" line="188" column="1" bodyfile="faiss/gpu/GpuIndexCagra.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="GpuIndicesOptions_8h_1a863afc54e6d0c3bf6a34490d02acd459" prot="public" static="no" strong="no">
        <type></type>
        <name>IndicesOptions</name>
        <enumvalue id="GpuIndicesOptions_8h_1a863afc54e6d0c3bf6a34490d02acd459a588811aea072aa57c268dec24d16ad81" prot="public">
          <name>INDICES_CPU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The user indices are only stored on the CPU; the GPU returns (inverted list, offset) to the CPU which is then translated to the real user index. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndicesOptions_8h_1a863afc54e6d0c3bf6a34490d02acd459a86cdd363f1311a43e0e99ebdc909311c" prot="public">
          <name>INDICES_IVF</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The indices are not stored at all, on either the CPU or GPU. Only (inverted list, offset) is returned to the user as the index. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndicesOptions_8h_1a863afc54e6d0c3bf6a34490d02acd459ad702a8b1a6bcefaa8d731762e4f88936" prot="public">
          <name>INDICES_32_BIT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indices are stored as 32 bit integers on the GPU, but returned as 64 bit integers </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuIndicesOptions_8h_1a863afc54e6d0c3bf6a34490d02acd459a3173a4e316b70ff921a20943bc055aac" prot="public">
          <name>INDICES_64_BIT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Indices are stored as 64 bit integers on the GPU. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>How user vector index data is stored on the GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndicesOptions.h" line="14" column="1" bodyfile="faiss/gpu/GpuIndicesOptions.h" bodystart="14" bodyend="28"/>
      </memberdef>
      <memberdef kind="enum" id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437" prot="public" static="no" strong="no">
        <type></type>
        <name>AllocType</name>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a0fcde2e6fdc2c0afd9a35bde9e99a269" prot="public">
          <name>Other</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Unknown allocation type or miscellaneous (not currently categorized) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a547b2cb3c7589068effabb0cad9fa907" prot="public">
          <name>FlatData</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Primary data storage for <ref refid="classfaiss_1_1gpu_1_1GpuIndexFlat" kindref="compound">GpuIndexFlat</ref> (the raw matrix of vectors and vector norms if needed) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a0b8e7919f13d089aef4f3bb6fd8420ab" prot="public">
          <name>IVFLists</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Primary data storage for GpuIndexIVF* (the storage for each individual IVF list) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a65a8f1712a80b76e79e2e36087ece51f" prot="public">
          <name>Quantizer</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para><ref refid="structfaiss_1_1Quantizer" kindref="compound">Quantizer</ref> (PQ, SQ) dictionary information. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a73a4afa64cdd0c13b4bc55087eedcc83" prot="public">
          <name>QuantizerPrecomputedCodes</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>For <ref refid="classfaiss_1_1gpu_1_1GpuIndexIVFPQ" kindref="compound">GpuIndexIVFPQ</ref>, &quot;precomputed codes&quot; for more efficient PQ lookup require the use of possibly large tables. These are marked separately from <ref refid="structfaiss_1_1Quantizer" kindref="compound">Quantizer</ref> as these can frequently be 100s - 1000s of MiB in size </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437a6da735df4e3424ba16ed6877129cf52b" prot="public">
          <name>TemporaryMemoryBuffer</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="classfaiss_1_1gpu_1_1StandardGpuResources" kindref="compound">StandardGpuResources</ref> implementation specific types When using <ref refid="classfaiss_1_1gpu_1_1StandardGpuResources" kindref="compound">StandardGpuResources</ref>, temporary memory allocations (MemorySpace::Temporary) come out of a stack region of memory that is allocated up front for each gpu (e.g., 1.5 GiB upon initialization). This allocation by <ref refid="classfaiss_1_1gpu_1_1StandardGpuResources" kindref="compound">StandardGpuResources</ref> is marked with this AllocType. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a7038aea27b7026c4b0b4a7afeb1ba437adeddb60bbeb3d0fd449dc5473bfbae74" prot="public">
          <name>TemporaryMemoryOverflow</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>When using <ref refid="classfaiss_1_1gpu_1_1StandardGpuResources" kindref="compound">StandardGpuResources</ref>, any MemorySpace::Temporary allocations that cannot be satisfied within the TemporaryMemoryBuffer region fall back to calling cudaMalloc which are sized to just the request at hand. These &quot;overflow&quot; temporary allocations are marked with this AllocType. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="43" column="1" bodyfile="faiss/gpu/GpuResources.h" bodystart="43" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="GpuResources_8h_1a308a493158ec240731ef7f87029fbd67" prot="public" static="no" strong="no">
        <type></type>
        <name>MemorySpace</name>
        <enumvalue id="GpuResources_8h_1a308a493158ec240731ef7f87029fbd67a3cbdb1d642f55fc4c351b62f6f259f76" prot="public">
          <name>Temporary</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Temporary device memory (guaranteed to no longer be used upon exit of a top-level index call, and where the streams using it have completed GPU work). Typically backed by Device memory (cudaMalloc/cudaFree). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a308a493158ec240731ef7f87029fbd67a18edc24f65a6948be1fd9a2c27df51cc" prot="public">
          <name>Device</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Managed using cudaMalloc/cudaFree (typical GPU device memory) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="GpuResources_8h_1a308a493158ec240731ef7f87029fbd67a0ee0f76a9dabbd16f80c5382472af6d6" prot="public">
          <name>Unified</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Managed using cudaMallocManaged/cudaFree (typical Unified CPU/GPU memory) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Memory regions accessible to the GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="87" column="1" bodyfile="faiss/gpu/GpuResources.h" bodystart="87" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="GpuCloner_8h_1a500b37234fbe71aed08ff67c3d7926dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
        <definition>faiss::Index* faiss::gpu::index_gpu_to_cpu</definition>
        <argsstring>(const faiss::Index *gpu_index)</argsstring>
        <name>index_gpu_to_cpu</name>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>gpu_index</declname>
        </param>
        <briefdescription>
<para>converts any GPU index inside gpu_index to a CPU index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="70" column="14" declfile="faiss/gpu/GpuCloner.h" declline="70" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="GpuCloner_8h_1a05cb0b5db1ebcd508cb0a259d4b536ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
        <definition>faiss::Index* faiss::gpu::index_cpu_to_gpu</definition>
        <argsstring>(GpuResourcesProvider *provider, int device, const faiss::Index *index, const GpuClonerOptions *options=nullptr)</argsstring>
        <name>index_cpu_to_gpu</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuClonerOptions" kindref="compound">GpuClonerOptions</ref> *</type>
          <declname>options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>converts any CPU index that can be converted to GPU </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="73" column="14" declfile="faiss/gpu/GpuCloner.h" declline="73" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="GpuCloner_8h_1a70e1ea3a49957b88b2de70f21b588735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
        <definition>faiss::Index* faiss::gpu::index_cpu_to_gpu_multiple</definition>
        <argsstring>(std::vector&lt; GpuResourcesProvider * &gt; &amp;provider, std::vector&lt; int &gt; &amp;devices, const faiss::Index *index, const GpuMultipleClonerOptions *options=nullptr)</argsstring>
        <name>index_cpu_to_gpu_multiple</name>
        <param>
          <type>std::vector&lt; <ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> * &gt; &amp;</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuMultipleClonerOptions" kindref="compound">GpuMultipleClonerOptions</ref> *</type>
          <declname>options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="79" column="14" declfile="faiss/gpu/GpuCloner.h" declline="79" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="GpuCloner_8h_1a3c1d63b6841829a0a51c42e041589adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
        <definition>faiss::IndexBinary* faiss::gpu::index_binary_gpu_to_cpu</definition>
        <argsstring>(const faiss::IndexBinary *gpu_index)</argsstring>
        <name>index_binary_gpu_to_cpu</name>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
          <declname>gpu_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="104" column="20" declfile="faiss/gpu/GpuCloner.h" declline="104" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="GpuCloner_8h_1a912ba9955075b7e10790c311f574d781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
        <definition>faiss::IndexBinary* faiss::gpu::index_binary_cpu_to_gpu</definition>
        <argsstring>(GpuResourcesProvider *provider, int device, const faiss::IndexBinary *index, const GpuClonerOptions *options=nullptr)</argsstring>
        <name>index_binary_cpu_to_gpu</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuClonerOptions" kindref="compound">GpuClonerOptions</ref> *</type>
          <declname>options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>converts any CPU index that can be converted to GPU </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="108" column="20" declfile="faiss/gpu/GpuCloner.h" declline="108" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="GpuCloner_8h_1a0738a578f6f04c79a547a842c7e3a0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
        <definition>faiss::IndexBinary* faiss::gpu::index_binary_cpu_to_gpu_multiple</definition>
        <argsstring>(std::vector&lt; GpuResourcesProvider * &gt; &amp;provider, std::vector&lt; int &gt; &amp;devices, const faiss::IndexBinary *index, const GpuMultipleClonerOptions *options=nullptr)</argsstring>
        <name>index_binary_cpu_to_gpu_multiple</name>
        <param>
          <type>std::vector&lt; <ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> * &gt; &amp;</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuMultipleClonerOptions" kindref="compound">GpuMultipleClonerOptions</ref> *</type>
          <declname>options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuCloner.h" line="114" column="20" declfile="faiss/gpu/GpuCloner.h" declline="114" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="GpuDistance_8h_1a2cfc72202868622221a8b69ec9a788e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::should_use_raft</definition>
        <argsstring>(GpuDistanceParams args)</argsstring>
        <name>should_use_raft</name>
        <param>
          <type><ref refid="structfaiss_1_1gpu_1_1GpuDistanceParams" kindref="compound">GpuDistanceParams</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that determines whether RAFT should be used based on various conditions (such as unsupported architecture) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="116" column="6" declfile="faiss/gpu/GpuDistance.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuDistance_8h_1a29928698b9b3bae60ff6f7e7d79e0354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::bfKnn</definition>
        <argsstring>(GpuResourcesProvider *resources, const GpuDistanceParams &amp;args)</argsstring>
        <name>bfKnn</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuDistanceParams" kindref="compound">GpuDistanceParams</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A wrapper for <ref refid="Distance_8cuh_source" kindref="compound">gpu/impl/Distance.cuh</ref> to expose direct brute-force k-nearest neighbor searches on an externally-provided region of memory (e.g., from a pytorch tensor). The data (vectors, queries, outDistances, outIndices) can be resident on the GPU or the CPU, but all calculations are performed on the GPU. If the result buffers are on the CPU, results will be copied back when done.</para>
<para>All GPU computation is performed on the current CUDA device, and ordered with respect to resources-&gt;getDefaultStreamCurrentDevice().</para>
<para>For each vector in <computeroutput>queries</computeroutput>, searches all of <computeroutput>vectors</computeroutput> to find its k nearest neighbors with respect to the given metric </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="130" column="6" declfile="faiss/gpu/GpuDistance.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuDistance_8h_1ac7e9ee53cc7034bf2f4b2c1902ca2571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::bfKnn_tiling</definition>
        <argsstring>(GpuResourcesProvider *resources, const GpuDistanceParams &amp;args, size_t vectorsMemoryLimit, size_t queriesMemoryLimit)</argsstring>
        <name>bfKnn_tiling</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1GpuDistanceParams" kindref="compound">GpuDistanceParams</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>vectorsMemoryLimit</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>queriesMemoryLimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="144" column="6" declfile="faiss/gpu/GpuDistance.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuDistance_8h_1ae2b4be0946d7ca9dbac7a03dbc6fd908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::bruteForceKnn</definition>
        <argsstring>(GpuResourcesProvider *resources, faiss::MetricType metric, const float *vectors, bool vectorsRowMajor, idx_t numVectors, const float *queries, bool queriesRowMajor, idx_t numQueries, int dims, int k, float *outDistances, idx_t *outIndices)</argsstring>
        <name>bruteForceKnn</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">faiss::MetricType</ref></type>
          <declname>metric</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vectors</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>vectorsRowMajor</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>numVectors</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>queriesRowMajor</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>numQueries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>outDistances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>outIndices</declname>
        </param>
        <briefdescription>
<para>Deprecated legacy implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuDistance.h" line="151" column="6" declfile="faiss/gpu/GpuDistance.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuIndex_8h_1a7c09e232a8ffdc821a88f88858351529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::should_use_raft</definition>
        <argsstring>(GpuIndexConfig config_)</argsstring>
        <name>should_use_raft</name>
        <param>
          <type><ref refid="structfaiss_1_1gpu_1_1GpuIndexConfig" kindref="compound">GpuIndexConfig</ref></type>
          <declname>config_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A centralized function that determines whether RAFT should be used based on various conditions (such as unsupported architecture) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="50" column="6" declfile="faiss/gpu/GpuIndex.h" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuIndex_8h_1a71050b5bacaf9b140ffd8feebf6369aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfaiss_1_1gpu_1_1GpuIndex" kindref="compound">GpuIndex</ref> *</type>
        <definition>GpuIndex* faiss::gpu::tryCastGpuIndex</definition>
        <argsstring>(faiss::Index *index)</argsstring>
        <name>tryCastGpuIndex</name>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>If the given index is a GPU index, this returns the index instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="188" column="10" declfile="faiss/gpu/GpuIndex.h" declline="188" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GpuIndex_8h_1a0a59a854dc33533d84251c97ce2e16e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::isGpuIndex</definition>
        <argsstring>(faiss::Index *index)</argsstring>
        <name>isGpuIndex</name>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Is the given index instance a GPU index? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="191" column="6" declfile="faiss/gpu/GpuIndex.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuIndex_8h_1a9a5eeb989c1d853a58aa65a8af310372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::isGpuIndexImplemented</definition>
        <argsstring>(faiss::Index *index)</argsstring>
        <name>isGpuIndexImplemented</name>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Does the given CPU index instance have a corresponding GPU implementation? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndex.h" line="194" column="6" declfile="faiss/gpu/GpuIndex.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="GpuResources_8h_1a01cfc3c8a312c3e60e1909eeb0941301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::gpu::allocTypeToString</definition>
        <argsstring>(AllocType t)</argsstring>
        <name>allocTypeToString</name>
        <param>
          <type>AllocType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Convert an AllocType to string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="84" column="13" declfile="faiss/gpu/GpuResources.h" declline="84" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="GpuResources_8h_1a26325bc7abaa18271fbe76c2bfbf1c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::gpu::memorySpaceToString</definition>
        <argsstring>(MemorySpace s)</argsstring>
        <name>memorySpaceToString</name>
        <param>
          <type>MemorySpace</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert a MemorySpace to string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="102" column="13" declfile="faiss/gpu/GpuResources.h" declline="102" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="GpuResources_8h_1a899d29db52c5400a548baa534667f1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref></type>
        <definition>AllocInfo faiss::gpu::makeDevAlloc</definition>
        <argsstring>(AllocType at, cudaStream_t st)</argsstring>
        <name>makeDevAlloc</name>
        <param>
          <type>AllocType</type>
          <declname>at</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Create an <ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref> for the current device with MemorySpace::Device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="135" column="11" declfile="faiss/gpu/GpuResources.h" declline="135" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="GpuResources_8h_1a25ba473fa8b757298399a9898435424a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref></type>
        <definition>AllocInfo faiss::gpu::makeTempAlloc</definition>
        <argsstring>(AllocType at, cudaStream_t st)</argsstring>
        <name>makeTempAlloc</name>
        <param>
          <type>AllocType</type>
          <declname>at</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Create an <ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref> for the current device with MemorySpace::Temporary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="138" column="11" declfile="faiss/gpu/GpuResources.h" declline="138" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="GpuResources_8h_1acc39275d82143dd1663807a635e59cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref></type>
        <definition>AllocInfo faiss::gpu::makeSpaceAlloc</definition>
        <argsstring>(AllocType at, MemorySpace sp, cudaStream_t st)</argsstring>
        <name>makeSpaceAlloc</name>
        <param>
          <type>AllocType</type>
          <declname>at</declname>
        </param>
        <param>
          <type>MemorySpace</type>
          <declname>sp</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Create an <ref refid="structfaiss_1_1gpu_1_1AllocInfo" kindref="compound">AllocInfo</ref> for the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="141" column="11" declfile="faiss/gpu/GpuResources.h" declline="141" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="IndexUtils_8h_1af43e39c84e5b12e107a71dfa5d840e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getMaxKSelection</definition>
        <argsstring>()</argsstring>
        <name>getMaxKSelection</name>
        <briefdescription>
<para>A collection of various utility functions for index implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum k-selection value supported based on the CUDA SDK that we were compiled with. .cu files can use <ref refid="DeviceDefs_8cuh_source" kindref="compound">DeviceDefs.cuh</ref>, but this is for non-CUDA files </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/IndexUtils.h" line="20" column="5" declfile="faiss/gpu/impl/IndexUtils.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="IndexUtils_8h_1ad2df4aca9cbd2dcfe0a721ce9dbacfae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::validateKSelect</definition>
        <argsstring>(int k)</argsstring>
        <name>validateKSelect</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/IndexUtils.h" line="23" column="6" declfile="faiss/gpu/impl/IndexUtils.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="IndexUtils_8h_1a31363ef889dec438a8d7fb99096900b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::validateNProbe</definition>
        <argsstring>(size_t nprobe)</argsstring>
        <name>validateNProbe</name>
        <param>
          <type>size_t</type>
          <declname>nprobe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/IndexUtils.h" line="26" column="6" declfile="faiss/gpu/impl/IndexUtils.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="InterleavedCodes_8h_1a6fa800d7de6859fa719c43184a021775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; faiss::gpu::unpackNonInterleaved</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; data, int numVecs, int dims, int bitsPerCode)</argsstring>
        <name>unpackNonInterleaved</name>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVecs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitsPerCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/InterleavedCodes.h" line="23" column="13" declfile="faiss/gpu/impl/InterleavedCodes.h" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="InterleavedCodes_8h_1aaf252105b63cae024ead79790da77591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; faiss::gpu::unpackInterleaved</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; data, int numVecs, int dims, int bitsPerCode)</argsstring>
        <name>unpackInterleaved</name>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVecs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitsPerCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/InterleavedCodes.h" line="34" column="13" declfile="faiss/gpu/impl/InterleavedCodes.h" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="InterleavedCodes_8h_1aa5fbf46e73968e7535eb83ef86cbcd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; faiss::gpu::packNonInterleaved</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; data, int numVecs, int dims, int bitsPerCode)</argsstring>
        <name>packNonInterleaved</name>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVecs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitsPerCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/InterleavedCodes.h" line="42" column="13" declfile="faiss/gpu/impl/InterleavedCodes.h" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="InterleavedCodes_8h_1ac7600011e96df9221930dcdfa0c790f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; faiss::gpu::packInterleaved</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; data, int numVecs, int dims, int bitsPerCode)</argsstring>
        <name>packInterleaved</name>
        <param>
          <type>std::vector&lt; uint8_t &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numVecs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitsPerCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/InterleavedCodes.h" line="50" column="13" declfile="faiss/gpu/impl/InterleavedCodes.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="RemapIndices_8h_1ac3554d7eea7de9a418116374084dbb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::ivfOffsetToUserIndex</definition>
        <argsstring>(idx_t *indices, idx_t numLists, idx_t queries, int k, const std::vector&lt; std::vector&lt; idx_t &gt;&gt; &amp;listOffsetToUserIndex)</argsstring>
        <name>ivfOffsetToUserIndex</name>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>numLists</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>queries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> &gt;&gt; &amp;</type>
          <declname>listOffsetToUserIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility function to translate (list id, offset) to a user index on the CPU. In a cpp in order to use OpenMP. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/impl/RemapIndices.h" line="18" column="6" declfile="faiss/gpu/impl/RemapIndices.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a6985d5edeae8143e4f1680b1428e55fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::newTestSeed</definition>
        <argsstring>()</argsstring>
        <name>newTestSeed</name>
        <briefdescription>
<para>Generates and displays a new seed for the test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="24" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a97a43b6f2ad18a336a6ffb7d182e70e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::setTestSeed</definition>
        <argsstring>(long seed)</argsstring>
        <name>setTestSeed</name>
        <param>
          <type>long</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Uses an explicit seed for the test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="27" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a58c0d857ccd6d5003f38f05969a04d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::gpu::relativeError</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>relativeError</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the relative error in difference between a and b (|a - b| / (0.5 * (|a| + |b|)) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="31" column="7" declfile="faiss/gpu/test/TestUtils.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1aa0974d57bcb32037493b2e50f4bc6553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::randVal</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>randVal</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Generates a random integer in the range [a, b]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="34" column="5" declfile="faiss/gpu/test/TestUtils.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1aeaf4a47f6d9c0f1f21f6841a7dd3cb48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::randBool</definition>
        <argsstring>()</argsstring>
        <name>randBool</name>
        <briefdescription>
<para>Generates a random bool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="37" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1ab667286f1786526a19d5186f2df348a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::gpu::randSelect</definition>
        <argsstring>(std::initializer_list&lt; T &gt; vals)</argsstring>
        <name>randSelect</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select a random value from the given list of values provided as an initializer_list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="42" column="3" bodyfile="faiss/gpu/test/TestUtils.h" bodystart="42" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1ae9641002715e79d0aa4c594bbc3daa01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::gpu::randVecs</definition>
        <argsstring>(size_t num, size_t dim)</argsstring>
        <name>randVecs</name>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Generates a collection of random vectors in the range [0, 1]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="58" column="13" declfile="faiss/gpu/test/TestUtils.h" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a237b6df9cf96b9ab805c46aef32a37b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt;unsigned char&gt; faiss::gpu::randBinaryVecs</definition>
        <argsstring>(size_t num, size_t dim)</argsstring>
        <name>randBinaryVecs</name>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Generates a collection of random bit vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="61" column="13" declfile="faiss/gpu/test/TestUtils.h" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a9a3c3ce871cb0ea52f9263e86022acb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::gpu::roundToHalf</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>roundToHalf</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="64" column="13" declfile="faiss/gpu/test/TestUtils.h" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1af10d6d642f9c390100d2b8a31203918f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::compareIndices</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;queryVecs, faiss::Index &amp;refIndex, faiss::Index &amp;testIndex, int numQuery, int dim, int k, const std::string &amp;configMsg, float maxRelativeError=6e-5f, float pctMaxDiff1=0.1f, float pctMaxDiffN=0.005f)</argsstring>
        <name>compareIndices</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>queryVecs</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> &amp;</type>
          <declname>refIndex</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> &amp;</type>
          <declname>testIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numQuery</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configMsg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxRelativeError</declname>
          <defval>6e-5f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiff1</declname>
          <defval>0.1f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiffN</declname>
          <defval>0.005f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two indices via query for similarity, with a user-specified set of query vectors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="68" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1aea8cc0513413b621ba2bcc3c5de02663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::compareIndices</definition>
        <argsstring>(faiss::Index &amp;refIndex, faiss::Index &amp;testIndex, int numQuery, int dim, int k, const std::string &amp;configMsg, float maxRelativeError=6e-5f, float pctMaxDiff1=0.1f, float pctMaxDiffN=0.005f)</argsstring>
        <name>compareIndices</name>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> &amp;</type>
          <declname>refIndex</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> &amp;</type>
          <declname>testIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numQuery</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configMsg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxRelativeError</declname>
          <defval>6e-5f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiff1</declname>
          <defval>0.1f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiffN</declname>
          <defval>0.005f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two indices via query for similarity, generating random query vectors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="82" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a44bd51d4a1b6c300dbb9ac2192dce14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::compareLists</definition>
        <argsstring>(const float *refDist, const faiss::idx_t *refInd, const float *testDist, const faiss::idx_t *testInd, int dim1, int dim2, const std::string &amp;configMsg, bool printBasicStats, bool printDiffs, bool assertOnErr, float maxRelativeError=6e-5f, float pctMaxDiff1=0.1f, float pctMaxDiffN=0.005f)</argsstring>
        <name>compareLists</name>
        <param>
          <type>const float *</type>
          <declname>refDist</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">faiss::idx_t</ref> *</type>
          <declname>refInd</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>testDist</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">faiss::idx_t</ref> *</type>
          <declname>testInd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configMsg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>printBasicStats</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>printDiffs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assertOnErr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxRelativeError</declname>
          <defval>6e-5f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiff1</declname>
          <defval>0.1f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>pctMaxDiffN</declname>
          <defval>0.005f</defval>
        </param>
        <briefdescription>
<para>Display specific differences in the two (distance, index) lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="94" column="6" declfile="faiss/gpu/test/TestUtils.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="TestUtils_8h_1a589a55d85f293c1ed9905e5aac936776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::gpu::testIVFEquality</definition>
        <argsstring>(A &amp;cpuIndex, B &amp;gpuIndex)</argsstring>
        <name>testIVFEquality</name>
        <param>
          <type>A &amp;</type>
          <declname>cpuIndex</declname>
        </param>
        <param>
          <type>B &amp;</type>
          <declname>gpuIndex</declname>
        </param>
        <briefdescription>
<para>Compare IVF lists between a CPU and GPU index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/test/TestUtils.h" line="111" column="6" bodyfile="faiss/gpu/test/TestUtils.h" bodystart="111" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a18ddaf734a629ded5ad2a2f235937298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getCurrentDevice</name>
        <briefdescription>
<para>Returns the current thread-local GPU device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="19" column="5" declfile="faiss/gpu/utils/DeviceUtils.h" declline="19" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1abf0b5b971122c7c024f70a2e690870ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::setCurrentDevice</definition>
        <argsstring>(int device)</argsstring>
        <name>setCurrentDevice</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Sets the current thread-local GPU device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="22" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1aaeb2757087735aef66e7ec5ba134530a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getNumDevices</definition>
        <argsstring>()</argsstring>
        <name>getNumDevices</name>
        <briefdescription>
<para>Returns the number of available GPU devices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="25" column="5" declfile="faiss/gpu/utils/DeviceUtils.h" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1aaf3d8c41cb926052dcdf4988a323bc3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::profilerStart</definition>
        <argsstring>()</argsstring>
        <name>profilerStart</name>
        <briefdescription>
<para>Starts the CUDA profiler (exposed via SWIG) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="28" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1aee97ca97dec791446ce147f0fe68db74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::profilerStop</definition>
        <argsstring>()</argsstring>
        <name>profilerStop</name>
        <briefdescription>
<para>Stops the CUDA profiler (exposed via SWIG) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="31" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a9aa4762fd8451c5f9b67072f4a4880e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::synchronizeAllDevices</definition>
        <argsstring>()</argsstring>
        <name>synchronizeAllDevices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronizes the CPU against all devices (equivalent to cudaDeviceSynchronize for each device) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="35" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a5ccce882c56a92a4830ce2fc7bedbc72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const cudaDeviceProp &amp;</type>
        <definition>const cudaDeviceProp&amp; faiss::gpu::getDeviceProperties</definition>
        <argsstring>(int device)</argsstring>
        <name>getDeviceProperties</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns a cached cudaDeviceProp for the given device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="38" column="22" declfile="faiss/gpu/utils/DeviceUtils.h" declline="38" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1af758bcee021c4fd616724dbf287e292a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const cudaDeviceProp &amp;</type>
        <definition>const cudaDeviceProp&amp; faiss::gpu::getCurrentDeviceProperties</definition>
        <argsstring>()</argsstring>
        <name>getCurrentDeviceProperties</name>
        <briefdescription>
<para>Returns the cached cudaDeviceProp for the current device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="41" column="22" declfile="faiss/gpu/utils/DeviceUtils.h" declline="41" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1aec530c2ba3468b1edd6e9eceb864e797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getMaxThreads</definition>
        <argsstring>(int device)</argsstring>
        <name>getMaxThreads</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the maximum number of threads available for the given GPU device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="45" column="5" declfile="faiss/gpu/utils/DeviceUtils.h" declline="45" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a7aa4505c9349ef84ae046e7973107366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getMaxThreadsCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getMaxThreadsCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getMaxThreads(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="48" column="5" declfile="faiss/gpu/utils/DeviceUtils.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a69e6e5488bcbf6d837070397ccf0edfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dim3</type>
        <definition>dim3 faiss::gpu::getMaxGrid</definition>
        <argsstring>(int device)</argsstring>
        <name>getMaxGrid</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the maximum grid size for the given GPU device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="51" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a736811b64cc68bb4d0ca5429640dd6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dim3</type>
        <definition>dim3 faiss::gpu::getMaxGridCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getMaxGridCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getMaxGrid(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="54" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1ab671a87a6284fc4d2fec44400ca5d163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::getMaxSharedMemPerBlock</definition>
        <argsstring>(int device)</argsstring>
        <name>getMaxSharedMemPerBlock</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the maximum smem available for the given GPU device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="57" column="8" declfile="faiss/gpu/utils/DeviceUtils.h" declline="57" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1accf2b1c27fb6cbd2b384266d42f8c9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::getMaxSharedMemPerBlockCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getMaxSharedMemPerBlockCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getMaxSharedMemPerBlock(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="60" column="8" declfile="faiss/gpu/utils/DeviceUtils.h" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a90940c17958ddf1b0f5a7f86b556788b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::getDeviceForAddress</definition>
        <argsstring>(const void *p)</argsstring>
        <name>getDeviceForAddress</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a given pointer, returns whether or not it is located on a device (deviceId &gt;= 0) or the host (-1). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="64" column="5" declfile="faiss/gpu/utils/DeviceUtils.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1ae57d0b0e0c7d5529d4aee4cbd432a474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::getFullUnifiedMemSupport</definition>
        <argsstring>(int device)</argsstring>
        <name>getFullUnifiedMemSupport</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the given device support full unified memory sharing host memory? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="68" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a5b39c8414f2bdc2fbe1ab6f5f21473f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::getFullUnifiedMemSupportCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getFullUnifiedMemSupportCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getFullUnifiedMemSupport(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="71" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a5de148f49baef8d80b3dd4a1509bec37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::getTensorCoreSupport</definition>
        <argsstring>(int device)</argsstring>
        <name>getTensorCoreSupport</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Does the given device support tensor core operations? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="74" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1abf99b9aa3d1433ad0a69e7cccd949817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::gpu::getTensorCoreSupportCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getTensorCoreSupportCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getTensorCoreSupport(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="77" column="6" declfile="faiss/gpu/utils/DeviceUtils.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a202fab8f3a469474cb41064f0f5c8732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::getFreeMemory</definition>
        <argsstring>(int device)</argsstring>
        <name>getFreeMemory</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the amount of currently available memory on the given device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="80" column="8" declfile="faiss/gpu/utils/DeviceUtils.h" declline="80" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a5a1d0d4863e18f7c0c154089d57dd61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::getFreeMemoryCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getFreeMemoryCurrentDevice</name>
        <briefdescription>
<para>Equivalent to getFreeMemory(getCurrentDevice()) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="83" column="8" declfile="faiss/gpu/utils/DeviceUtils.h" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a4e6905505fb0c0d1525037408ee0a389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::gpu::streamWaitBase</definition>
        <argsstring>(const L1 &amp;listWaiting, const L2 &amp;listWaitOn)</argsstring>
        <name>streamWaitBase</name>
        <param>
          <type>const L1 &amp;</type>
          <declname>listWaiting</declname>
        </param>
        <param>
          <type>const L2 &amp;</type>
          <declname>listWaitOn</declname>
        </param>
        <briefdescription>
<para>Call for a collection of streams to wait on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="164" column="6" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="164" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a64ae6cf687076b6b0f6a956e42d009c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::gpu::streamWait</definition>
        <argsstring>(const L1 &amp;a, const std::initializer_list&lt; cudaStream_t &gt; &amp;b)</argsstring>
        <name>streamWait</name>
        <param>
          <type>const L1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; cudaStream_t &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These versions allow usage of initializer_list as arguments, since otherwise {...} doesn&apos;t have a type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="189" column="6" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a26377a820f76459a3451aa2664b6326f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::gpu::streamWait</definition>
        <argsstring>(const std::initializer_list&lt; cudaStream_t &gt; &amp;a, const L2 &amp;b)</argsstring>
        <name>streamWait</name>
        <param>
          <type>const std::initializer_list&lt; cudaStream_t &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const L2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="194" column="6" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="DeviceUtils_8h_1a0ef5a2acf5c02c590e5029c061f463d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::streamWait</definition>
        <argsstring>(const std::initializer_list&lt; cudaStream_t &gt; &amp;a, const std::initializer_list&lt; cudaStream_t &gt; &amp;b)</argsstring>
        <name>streamWait</name>
        <param>
          <type>const std::initializer_list&lt; cudaStream_t &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; cudaStream_t &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/DeviceUtils.h" line="198" column="13" bodyfile="faiss/gpu/utils/DeviceUtils.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="RaftUtils_8h_1a09ddc3176b613dae5b8cd9a61c6b3d4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>raft::distance::DistanceType</type>
        <definition>raft::distance::DistanceType faiss::gpu::metricFaissToRaft</definition>
        <argsstring>(MetricType metric, bool exactDistance)</argsstring>
        <name>metricFaissToRaft</name>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exactDistance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/RaftUtils.h" line="35" column="37" bodyfile="faiss/gpu/utils/RaftUtils.h" bodystart="35" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="RaftUtils_8h_1a96b52c4a7d364a661afad37f4a75adfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::validRowIndices</definition>
        <argsstring>(GpuResources *res, Tensor&lt; float, 2, true &gt; &amp;vecs, bool *validRows)</argsstring>
        <name>validRowIndices</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>Tensor&lt; float, 2, true &gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>validRows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify matrix rows containing non NaN values. validRows[i] is false if row i contains a NaN value and true otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/RaftUtils.h" line="62" column="6" declfile="faiss/gpu/utils/RaftUtils.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="RaftUtils_8h_1a3cc563a7cb538b461187b53cc29188ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::gpu::inplaceGatherFilteredRows</definition>
        <argsstring>(GpuResources *res, Tensor&lt; float, 2, true &gt; &amp;vecs, Tensor&lt; idx_t, 1, true &gt; &amp;indices)</argsstring>
        <name>inplaceGatherFilteredRows</name>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>Tensor&lt; float, 2, true &gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <param>
          <type>Tensor&lt; <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref>, 1, true &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filter out matrix rows containing NaN values. The vectors and indices are updated in-place. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/utils/RaftUtils.h" line="69" column="7" declfile="faiss/gpu/utils/RaftUtils.h" declline="69" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="faiss/gpu/GpuAutoTune.h" line="14" column="1"/>
  </compounddef>
</doxygen>
